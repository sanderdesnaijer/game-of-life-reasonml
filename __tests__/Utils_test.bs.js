// Generated by BUCKLESCRIPT VERSION 4.0.2, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Utils$ReactTemplate = require("../src/Utils.bs.js");

var testGrid = /* :: */[
  /* :: */[
    /* Dead */0,
    /* :: */[
      /* Dead */0,
      /* :: */[
        /* Dead */0,
        /* :: */[
          /* Dead */0,
          /* :: */[
            /* Dead */0,
            /* [] */0
          ]
        ]
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      /* Dead */0,
      /* :: */[
        /* Dead */0,
        /* :: */[
          /* Alive */1,
          /* :: */[
            /* Dead */0,
            /* :: */[
              /* Dead */0,
              /* [] */0
            ]
          ]
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        /* Dead */0,
        /* :: */[
          /* Dead */0,
          /* :: */[
            /* Alive */1,
            /* :: */[
              /* Dead */0,
              /* :: */[
                /* Dead */0,
                /* [] */0
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Dead */0,
          /* :: */[
            /* Dead */0,
            /* :: */[
              /* Alive */1,
              /* :: */[
                /* Dead */0,
                /* :: */[
                  /* Dead */0,
                  /* [] */0
                ]
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            /* Dead */0,
            /* :: */[
              /* Dead */0,
              /* :: */[
                /* Dead */0,
                /* :: */[
                  /* Dead */0,
                  /* :: */[
                    /* Dead */0,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* [] */0
        ]
      ]
    ]
  ]
];

describe("toString", (function () {
        var testValue = "testing-109";
        return Jest.test("in bounds", (function () {
                      return Jest.Expect[/* toBe */2](Utils$ReactTemplate.toString(testValue), Jest.Expect[/* expect */0](Utils$ReactTemplate.toString(testValue)));
                    }));
      }));

describe("isAlive", (function () {
        Jest.test("Alive", (function () {
                return Jest.Expect[/* toBe */2](/* Dead */0, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(0, /* Alive */1)));
              }));
        Jest.test("Alive", (function () {
                return Jest.Expect[/* toBe */2](/* Dead */0, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(1, /* Alive */1)));
              }));
        Jest.test("Alive", (function () {
                return Jest.Expect[/* toBe */2](/* Alive */1, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(2, /* Alive */1)));
              }));
        Jest.test("Alive", (function () {
                return Jest.Expect[/* toBe */2](/* Alive */1, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(3, /* Alive */1)));
              }));
        Jest.test("Alive", (function () {
                return Jest.Expect[/* toBe */2](/* Dead */0, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(4, /* Alive */1)));
              }));
        Jest.test("Dead", (function () {
                return Jest.Expect[/* toBe */2](/* Dead */0, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(2, /* Dead */0)));
              }));
        Jest.test("Dead", (function () {
                return Jest.Expect[/* toBe */2](/* Alive */1, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(3, /* Dead */0)));
              }));
        return Jest.test("Dead", (function () {
                      return Jest.Expect[/* toBe */2](/* Dead */0, Jest.Expect[/* expect */0](Utils$ReactTemplate.isAlive(4, /* Dead */0)));
                    }));
      }));

describe("getNextCell", (function () {
        Jest.test("in bounds", (function () {
                return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Utils$ReactTemplate.getNextCell(0, 10)));
              }));
        Jest.test("out of bounds negative", (function () {
                return Jest.Expect[/* toBe */2](9, Jest.Expect[/* expect */0](Utils$ReactTemplate.getNextCell(-1, 10)));
              }));
        return Jest.test("out of bounds positive", (function () {
                      return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Utils$ReactTemplate.getNextCell(10, 10)));
                    }));
      }));

describe("getNeighbourValue", (function () {
        Jest.test("row 1 col 1", (function () {
                return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Utils$ReactTemplate.getNeighbourValue(1, 0, testGrid)));
              }));
        Jest.test("row 1 col 2", (function () {
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](Utils$ReactTemplate.getNeighbourValue(1, 2, testGrid)));
              }));
        return Jest.test("row 1 col 3", (function () {
                      return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](Utils$ReactTemplate.getNeighbourValue(1, 3, testGrid)));
                    }));
      }));

describe("calcNextState with oscilator pattern", (function () {
        var predictedResult = /* :: */[
          /* :: */[
            /* Dead */0,
            /* :: */[
              /* Dead */0,
              /* :: */[
                /* Dead */0,
                /* :: */[
                  /* Dead */0,
                  /* :: */[
                    /* Dead */0,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              /* Dead */0,
              /* :: */[
                /* Dead */0,
                /* :: */[
                  /* Dead */0,
                  /* :: */[
                    /* Dead */0,
                    /* :: */[
                      /* Dead */0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                /* Dead */0,
                /* :: */[
                  /* Alive */1,
                  /* :: */[
                    /* Alive */1,
                    /* :: */[
                      /* Alive */1,
                      /* :: */[
                        /* Dead */0,
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  /* Dead */0,
                  /* :: */[
                    /* Dead */0,
                    /* :: */[
                      /* Dead */0,
                      /* :: */[
                        /* Dead */0,
                        /* :: */[
                          /* Dead */0,
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    /* Dead */0,
                    /* :: */[
                      /* Dead */0,
                      /* :: */[
                        /* Dead */0,
                        /* :: */[
                          /* Dead */0,
                          /* :: */[
                            /* Dead */0,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ];
        Jest.test("nextState", (function () {
                return Jest.Expect[/* toEqual */12](predictedResult, Jest.Expect[/* expect */0](Utils$ReactTemplate.calcNextState(testGrid)));
              }));
        return Jest.test("nextState", (function () {
                      return Jest.Expect[/* toEqual */12](testGrid, Jest.Expect[/* expect */0](Utils$ReactTemplate.calcNextState(predictedResult)));
                    }));
      }));

exports.testGrid = testGrid;
/*  Not a pure module */
