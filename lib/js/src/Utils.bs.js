// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");

function toString(prim) {
  return prim;
}

function isAlive(totalNeighbours, field) {
  if (field) {
    var match = totalNeighbours === 2 || totalNeighbours === 3;
    if (match) {
      return /* Alive */1;
    } else {
      return /* Dead */0;
    }
  } else {
    var match$1 = totalNeighbours === 3;
    if (match$1) {
      return /* Alive */1;
    } else {
      return /* Dead */0;
    }
  }
}

function getNextCell(index, totalFields) {
  var min = index === -1;
  var max = index > (totalFields - 1 | 0);
  if (min) {
    return totalFields - 1 | 0;
  } else if (max) {
    return index - totalFields | 0;
  } else {
    return index;
  }
}

function calcNeighbour(row, col, totalRows, totalCols, grid) {
  var nextRow = getNextCell(row, totalRows);
  var nextCol = getNextCell(col, totalCols);
  var match = List.nth(List.nth(grid, nextRow), nextCol) === /* Dead */0;
  if (match) {
    return 0;
  } else {
    return 1;
  }
}

function calcNextState(grid) {
  return List.mapi((function (rowIndex, row) {
                return List.mapi((function (colIndex, value) {
                              var totalRows = List.length(grid);
                              var totalCols = List.length(row);
                              var neighbours_000 = /* :: */[
                                rowIndex - 1 | 0,
                                /* :: */[
                                  colIndex - 1 | 0,
                                  /* [] */0
                                ]
                              ];
                              var neighbours_001 = /* :: */[
                                /* :: */[
                                  rowIndex - 1 | 0,
                                  /* :: */[
                                    colIndex,
                                    /* [] */0
                                  ]
                                ],
                                /* :: */[
                                  /* :: */[
                                    rowIndex - 1 | 0,
                                    /* :: */[
                                      colIndex + 1 | 0,
                                      /* [] */0
                                    ]
                                  ],
                                  /* :: */[
                                    /* :: */[
                                      rowIndex,
                                      /* :: */[
                                        colIndex - 1 | 0,
                                        /* [] */0
                                      ]
                                    ],
                                    /* :: */[
                                      /* :: */[
                                        rowIndex,
                                        /* :: */[
                                          colIndex + 1 | 0,
                                          /* [] */0
                                        ]
                                      ],
                                      /* :: */[
                                        /* :: */[
                                          rowIndex + 1 | 0,
                                          /* :: */[
                                            colIndex - 1 | 0,
                                            /* [] */0
                                          ]
                                        ],
                                        /* :: */[
                                          /* :: */[
                                            rowIndex + 1 | 0,
                                            /* :: */[
                                              colIndex,
                                              /* [] */0
                                            ]
                                          ],
                                          /* :: */[
                                            /* :: */[
                                              rowIndex + 1 | 0,
                                              /* :: */[
                                                colIndex + 1 | 0,
                                                /* [] */0
                                              ]
                                            ],
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ];
                              var neighbours = /* :: */[
                                neighbours_000,
                                neighbours_001
                              ];
                              var totalNeighbours = [0];
                              List.map((function (neighbour) {
                                      totalNeighbours[0] = totalNeighbours[0] + calcNeighbour(List.nth(neighbour, 0), List.nth(neighbour, 1), totalRows, totalCols, grid) | 0;
                                      return /* () */0;
                                    }), neighbours);
                              return isAlive(totalNeighbours[0], value);
                            }), row);
              }), grid);
}

exports.toString = toString;
exports.isAlive = isAlive;
exports.getNextCell = getNextCell;
exports.calcNeighbour = calcNeighbour;
exports.calcNextState = calcNextState;
/* No side effect */
