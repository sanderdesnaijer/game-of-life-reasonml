// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function toString(prim) {
  return prim;
}

function isAlive(totalNeighbours, field) {
  if (field) {
    var match = totalNeighbours === 2 || totalNeighbours === 3;
    if (match) {
      return /* Alive */1;
    } else {
      return /* Dead */0;
    }
  } else {
    var match$1 = totalNeighbours === 3;
    if (match$1) {
      return /* Alive */1;
    } else {
      return /* Dead */0;
    }
  }
}

function getNextCell(index, totalFields) {
  var min = index === -1;
  var max = index > (totalFields - 1 | 0);
  if (min) {
    return totalFields - 1 | 0;
  } else if (max) {
    return index - totalFields | 0;
  } else {
    return index;
  }
}

function getNeighbour(row, col, grid) {
  var nextRow = getNextCell(row, List.length(grid));
  var nextCol = getNextCell(col, List.length(List.nth(grid, 0)));
  var neighbour = List.nth(List.nth(grid, nextRow), nextCol);
  if (neighbour) {
    return 1;
  } else {
    return 0;
  }
}

function calcNextState(grid) {
  return List.mapi((function (rowIndex, row) {
                return List.mapi((function (colIndex, value) {
                              var neighbours = /* array */[
                                /* array */[
                                  rowIndex - 1 | 0,
                                  colIndex - 1 | 0
                                ],
                                /* array */[
                                  rowIndex - 1 | 0,
                                  colIndex
                                ],
                                /* array */[
                                  rowIndex - 1 | 0,
                                  colIndex + 1 | 0
                                ],
                                /* array */[
                                  rowIndex,
                                  colIndex - 1 | 0
                                ],
                                /* array */[
                                  rowIndex,
                                  colIndex + 1 | 0
                                ],
                                /* array */[
                                  rowIndex + 1 | 0,
                                  colIndex - 1 | 0
                                ],
                                /* array */[
                                  rowIndex + 1 | 0,
                                  colIndex
                                ],
                                /* array */[
                                  rowIndex + 1 | 0,
                                  colIndex + 1 | 0
                                ]
                              ];
                              var totalNeighbours = neighbours.reduce((function (total, list) {
                                      return total + getNeighbour(Caml_array.caml_array_get(list, 0), Caml_array.caml_array_get(list, 1), grid) | 0;
                                    }), 0);
                              return isAlive(totalNeighbours, value);
                            }), row);
              }), grid);
}

exports.toString = toString;
exports.isAlive = isAlive;
exports.getNextCell = getNextCell;
exports.getNeighbour = getNeighbour;
exports.calcNextState = calcNextState;
/* No side effect */
