// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");

function toString(prim) {
  return prim;
}

function isAlive(totalNeighbours, field) {
  if (field) {
    var match = totalNeighbours === 2 || totalNeighbours === 3;
    if (match) {
      return /* Alive */1;
    } else {
      return /* Dead */0;
    }
  } else {
    var match$1 = totalNeighbours === 3;
    if (match$1) {
      return /* Alive */1;
    } else {
      return /* Dead */0;
    }
  }
}

function getNextCell(index, totalFields) {
  var min = index === -1;
  var max = index > (totalFields - 1 | 0);
  if (min || max) {
    if (min) {
      return totalFields - 1 | 0;
    } else {
      return index - totalFields | 0;
    }
  } else {
    return index;
  }
}

function calcNeighbour(row, col, totalRows, totalCols, grid) {
  var nextRow = getNextCell(row, totalRows);
  var nextCol = getNextCell(col, totalCols);
  var match = List.nth(List.nth(grid, nextRow), nextCol) === /* Dead */0;
  if (match) {
    return 0;
  } else {
    return 1;
  }
}

function calcNextState(grid) {
  return List.mapi((function (rowIndex, row) {
                return List.mapi((function (colIndex, value) {
                              var totalRows = List.length(grid);
                              var totalCols = List.length(row);
                              var topLeft = calcNeighbour(rowIndex - 1 | 0, colIndex - 1 | 0, totalRows, totalCols, grid);
                              var topCenter = calcNeighbour(rowIndex - 1 | 0, colIndex, totalRows, totalCols, grid);
                              var topRight = calcNeighbour(rowIndex - 1 | 0, colIndex + 1 | 0, totalRows, totalCols, grid);
                              var centerLeft = calcNeighbour(rowIndex, colIndex - 1 | 0, totalRows, totalCols, grid);
                              var centerRight = calcNeighbour(rowIndex, colIndex + 1 | 0, totalRows, totalCols, grid);
                              var bottomLeft = calcNeighbour(rowIndex + 1 | 0, colIndex - 1 | 0, totalRows, totalCols, grid);
                              var bottomCenter = calcNeighbour(rowIndex + 1 | 0, colIndex, totalRows, totalCols, grid);
                              var bottomRight = calcNeighbour(rowIndex + 1 | 0, colIndex + 1 | 0, totalRows, totalCols, grid);
                              var totalNeighbours = ((((((topLeft + topCenter | 0) + topRight | 0) + centerLeft | 0) + centerRight | 0) + bottomLeft | 0) + bottomCenter | 0) + bottomRight | 0;
                              return isAlive(totalNeighbours, value);
                            }), row);
              }), grid);
}

exports.toString = toString;
exports.isAlive = isAlive;
exports.getNextCell = getNextCell;
exports.calcNeighbour = calcNeighbour;
exports.calcNextState = calcNextState;
/* No side effect */
